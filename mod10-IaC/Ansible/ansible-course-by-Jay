Ansible Course

#############################
Ansible 01 - Introduction
#############################

Learn Ansible by Jay LaCroix - Learn Linux TV

Link to the video
https://www.youtube.com/watch?v=3RiVKs8GHYQ&list=PLT98CRl2KxKEUHie1m24-wkyHpEsa4Y70

Outline of this Ansible Course

Why Ansible is needed.?
~~~~~~~~~~~~~~~~~~~~~~~

It is used to Provision and manage servers like installation, upgradation, 
apply security patches, etc
It is a configuration management tool and it uses procedural approach to manage
infrastructure.

Ansible Control node configure Server1 server2 server3
Ansible can be setup in multiple ways
Best practices - 
Ansible control host is not required - only a workstation/laptop is needed to configure hosts.
The workstation will have scripts like ansible playbook to be used to run ansible against 
the servers using ssh protocol.

But we need to protect and version control the scripts so that even if the workstation goes down 
or its harddisk get corrupted, we still be able to get the files from the VCS.
we will use git for version control and storing of these ansible scripts or playbooks.
Also we can colloborate with other team memebers when we are working with the servers

git

Ansible Setup
1. Three Ubuntu Server VMs to simulate ubuntu 20.03, 20.04 and 20.05
2. ssh - openssh
3. Install git and create a git repository
4. install ansible

And then deeper into ansible

###################################
Ansible 02 - SSH overview and setup
###################################
ssh - ? secure shell
ssh username@ipaddress -i /path/to/ssh/key

example: 
ssh -i /home/ubuntu/keypair ubuntu@172.16.250.133

secure the connection using sshkey

1. ssh server - ensure openssh is installed on workstation and servers
   # run below command to install openssh server on linux machines if not already installed
     sudo apt install openssh-server

2. After installation, connect to ssh server using ssh client and answer yes to 
   initial connection prompt.
3. create an ssh keypair (with a passphrase) using ssh-keygen for normal user account
4. copy that key to each of the server
5. create an ssh key that is specific to ansible
6. copy that key to each of the server

Above steps in more details:
---------------------------
cd # go to home directory
ls -la .ssh # check for the presence of an already existing key in .ssh directory 

ssh-keygen -t ed25519 -C "devuser default"
where 
-t type rsa, ed25519(most secure)
-C comment - describing more details about the key

output: you will be prompted for
location to store the key: select default
a passphrase: - enter passphrase

a key is generated and stored in the ~/.ssh directory

ls -la ~/.ssh to check the key generated
Look for 2 files: 
id25519     : It is a private key and it should not be shared with anyoone
id25519.pub : It is public key and this is copied to the managed noded 
              using ssh-copy-id command ( in the authorized_keys file )

cat ~/.ssh/ed25519.pub # to see the key generated 

create key value pair in aws instance by selected ed25519 encryption and openssh pem file format
create 3 ec2 instances in aws
Successfully initiated launch of instances 
Instance Ids: (i-0caed49589b5bbf7b, i-00c4ddcb32533a62f, i-0a67e5183837cb0a5)

public IPs of EC2 instances 
[will change if the EC2 instances is stopped and/or (re)started]

52.55.129.20 
54.145.44.88 
54.89.44.152

ssh-copy-id -i ~/.ssh/id_ed25519.pub ubuntu@52.55.129.20 237 # will not work for aws EC2 instance
ssh-copy-id -i ~/.ssh/id_ed25519.pub ubuntu@54.145.44.88 61 # will not work for aws EC2 instance
ssh-copy-id -i ~/.ssh/id_ed25519.pub ubuntu@54.89.44.152 222 # will not work for aws EC2 instance

copy the content of the public key file id_ed25519.pub to file of ~/.ssh/authorized_keys of the managed nodes

Login from your ansible control node / laptop / desktop  

ssh ubuntu@52.55.129.20
ssh ubuntu@54.145.44.88
ssh ubuntu@54.89.44.152

IF we are able to login, it shows us that the public key is successfully installed in the managed nodes

Generating ansible key

In the similar fashion, we need anisble to login to the managed nodes but we dont want 
it to prompt for the passphrase. Therefore, repeat the above steps of generating the public key,
but make sure not to enter the passphrase when prompted for the passphrase.Just press enter twice.

Command interactions:
---------------------
ssh-keygen -t ed25519 -C "ansible"
Generating public/private ed25519 key pair.
Enter file in which to save the key (/home/devuser/.ssh/id_ed25519): /home/devuser/.ssh/ansible
Enter passphrase (empty for no passphrase):
Enter same passphrase again:

copy the content of the public key file ansible.pub to file of ~/.ssh/authorized_keys of the managed nodes

eval $(ssh-agent)
Agent pid 3573

 ps aux | grep 3573

 ssh-add
Enter passphrase for /home/devuser/.ssh/id_ed25519:
Identity added: /home/devuser/.ssh/id_ed25519 (devuser default)

Add the below line to ~/.bashrc file so that we can use this alias as short command 
instead of using two seperate commands
vim ~/.bashrc
alias ssha='eval $(ssh-agent) && ssh-add'


##########################################
Ansible 03 - Setting up the Git repository
##########################################

Now we need to setup a remote git repository so that the work files are stored 
onto the repository so that they are tracked and will used later.

1. Create a git repository in github.com with the name ansible_tutorial and create a README file.
2. Add the public key of the master node or control node (~/.ssh/id_ed25519.pub) to the 
   SSH and GPG keys located in the settings page of your github page.
3. Add key name as:  devuser default
4. Add key value as: copy paste the public key ~/.ssh/id_ed25519.pub in the keys box
5. copy the ssh url under the Code button of your remote repository
6. Run git clone git@github.com:username/ansible_tutorial.git in your home directory.
7. A folder named ansible_tutorial will be created in the home directory 
8. Configure your local git repository by running the following commands:
   git config --global user.name "devuser"
   git config --global user.email "devuser@mail.com"


################################################
Ansible 04 - Running Ansible with adhoc commands 
################################################

1. Install ansible
   sudo apt update
   sudo apt install ansible
2. Run ansible command to check version and to confirm ansible is installed
   ansible --version
3. create an inventory file and IP addresses of the managed nodes 
   vim inventory
   18.206.181.9 
   54.165.1.73 
   54.157.45.234
   
4. Run the ansible adhoc command to check ansible is able to connect to the nodes
   make sure you add username with -u option
    ansible -u ubuntu all --key-file ~/.ssh/ansible -i inventory -m ping

output: 

18.206.181.9 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
54.165.1.73 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
54.157.45.234 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}

5. We can add options to the config file ansible.cfg in the current working directory
    [defaults]
    inventory = inventory
    private_key_file =  ~/.ssh/ansible
    remote_user=ubuntu

    Now run ansible command with options moved to the config file

    ansible all -m ping

6. ansible all -m gather_facts --limit 54.157.45.234


#############################################
Ansible 05 - Running elevated adhoc commands 
#############################################

Till now, we have been able to query remote hosts and gather information 
about their configuration. Going forward, in this class, we are going to
see the commands that will make changes to the remote host configurations. 

To make changes to the remote hosts, we need to make sure ansible
is given required permission.

Ansible command to make configuration changes to the remote machines
---------------------------------------------------------------------

ansible all -m apt -a update_cache=true
 
# same thing as ubuntu linux command: apt update

The above command will fail because it is run without root privelages
So if we need to run a command in linux using root privilages such as 
installing or updating the configuration of the remote hosts, we need
to make sure we run those commands with elevated privilages such as 
becoming a superuser or affixing a 'sudo' before the name of the command.

In ansible we can do this using options --become --ask-become-pass 

ansible all -m apt -a update_cache=true  --become --ask-become-pass

# same thig as: sudo apt update

Please refer following link for all options of the apt module
in ansible 

https://docs.ansible.com/ansible/2.9/modules/apt_module.html

In the above document, we can see that update_cache argument to apt 
module is no or false by default. Therefore it is set to true 
which is equivalent to the 'apt update' command


Actual package installation
---------------------------

ansible all -m apt -a name=vim-nox --become --ask-become-pass

BECOME password: type password here

we can check the remote host machines whether vim-nox is installed
using: 
apt search vim-nox

we can use another example.
Install tmux package

ansible all -m apt -a name=tmux --become --ask-become-pass

we can check the changed flag/field of the ansible command output
If "changed":false, then the package tmux is not installed


we can also login to the remote machine and check the file
/var/log/apt/history.log file of the apt package whether the
package is actually installed or not. 
If vim-nox is installed,we can see the logs for vim-nox installation 
in this log file.

vim /var/log/apt/history.log

After we run  sudo apt update  command, the last line of the command output 
states that there are some packages that can be upgraded.
Therefore we can run

sudo apt dist-upgrade

to upgrade.

But wait, we can do this same using ansible.

For example, if we check the list we can see that snapd package can be upgraded.
therefore we can run ansible command to upgrade snapd package:

ansible all -m apt -a "name=snapd state=latest" --become --ask-become-pass

But if we want to upgrade all the packages then we can run

ansible all -m apt -a "upgrade=dist" --become --ask-become-pass


########################################
Ansible 06 - Writing our first playbook 
########################################

Install Apache2 package 
-----------------------

Ansible uses yaml file to read the plays.We are going to install apache2 
and php support packages in the hosts using install_apache.yml file.

vim install_apache.yml

# yaml file starts with three dashes ( --- ) considering as one document.
# then we give this line as blank line, followed by single dash( - ) and one space
---
- hosts: all     # hosts refers to all hosts in the inventory file
  become: true   # here alignment is very important. become a root user
  tasks:         # each


  - name: Install apache2 package
    apt:
      name: apache2 # The name of the package that we will install
...              # end of the yaml document

WE can run the playbook using the ansible-playbook command

ansible-playbook --ask-become-pass install_apache.yml

This command targets all hosts with this playbook.

When we run anisble-playbook command, Ansible is going to use gather_facts
module (running as a first task in the ansible play)
This is because ansible needs to know which OS the host is running and what 
distribution of linux it is going to manage. 

changed flag with host IP tells us that the configuration of the host has changed.
changed=1 unreachable =1  means network issue , 
skip=1 means skipped the change. skip only if some requirment is met. 
       Otherwise dont skip it with skip=0 
rescued=0 way to make a task run if previous task fails

IF we run the command once again after installing apache2
changed=0 as nothing has changed and ok will be in the result for apache2 play.

check whether apache2 is installed by using the ip address of the host 
runnig apache2 by checking it in the browser of the machine that is running Ansible CLI.
(control node machine from where ansible commands are run)

Note: You need to add inboud rules in aws EC2 instance to allow port 80/tcp. Otherwise
the browser will not be able to access the apache server.
Also we can use the command: sudo systemctl status apache2 to confirm apache is active
and running.

Installing invalid package
-------------------------
if we change the package name in playbook to some package which is not present, then the 
ansible-playbook command will fail ( command output: failed=1 in red color )

Further, we can add one more play to the ansible playbook by adding one more task.
What if the pachage repository index is stale. That is, if apache2 is not in the repository index.
Therfore we should always update index cache before installing a package.

Please check install_apache.yml and remove_apache.yml files to see how ansible playbook is
structured and how simple it is to understand. 

We can use them in the ansible-playbook command to install and remove apache and php packages. 

ansible-playbook --become install_apache.yml
ansible-playbook --become remove_apache.yml

Do always refer apt module documentation in ansible to learn about various options. 


##############################
Ansible 07 - When conditional 
##############################

digress: 
git pull is required if multiple collaborators are working on a git repository so that 
the local and remote repositories are always in sync before we push our changes to the 
remote repository..

coming back:
If we have hosts running more than one Linux distribution, we can fine tune the 
ansible playbook to include tasks specific to a particular distribution.

we should basically check gather_facts module output for each host using grep command
to find which Linux distribution the host is running. This helps us to target a specific
distribution using 'when' conditional in the playbook yaml file.

Below is an ansible adhoc command that uses gather_facts module to find the Linux 
distribution the host is running.

ansible all -m gather_facts --limit ipaddress | grep ansible_distribution

see below how we can use the when conditional in the ansible playbook yaml file.
(Please check the install_apache_dist.yml file)

  - name: Install apache and php packages for ubuntu servers
    apt:
      name: 
        - apache2
        - libapache2-mod-php
      state: latest
      update_cache: true
    when: ansible_distribution == "Ubuntu"

  - name: Install apache and php packages for Centos servers
    dnf:
      name:
        - httpd
        - php
      state: latest
      update_cache: true
    when: ansible_distribution == "CentOS" 

################################
Ansible 08 - Improving playbook
################################

We can further make it more generic so that we have only onee task in the playbook file.
file. we use variables inside the inventory file targeting specific host and use ansible
package module instead of apt module as apt module is tied to debian distribution only.

  - name: Install apache and php package
    package:
      name:
        - "{{ apache-package }}" 
        - "{{ php-package }}"
      state: latest
      update_cache: true

Save above play in a seperate playbook yaml file: install_apache_generic.yml.
Add varibles apache-package and php-package in an inventory file: inventory_with_variables
  
Now run the ansible-playbook command as below:

ansible-playbook --become -i inventory_with_variables install_apache_generic.yml
note: --ask-become-password flag is not needed for aws EC2 instance


#####################################
Ansible 09 - Targeting specific nodes
#####################################

Ansible can be used to manage the configuration of specific nodes based 
on certain criteria. The criteria can be "what these nodes do" or 
"where these nodes are physically located" or "when they are going to be used.

Accordingly, we can form a group of nodes and assign a name to the group in the inventory 
file based on the criteria such as webservers, dbservers,firstfloor, prod, dev etc. Make 
sure you enclose the name within the brackets.

[webservers]
IP ADDR1
IP ADDR2

[dbservers]
IP ADDR1
IP ADDR2

[fileservers]
IP ADDR1
IP ADDR2

In order for the ansible to target specific nodes, we can add the group name
in the hosts sections of the site.yml playbook file as shown below.

- hosts: dbservers
  become: true
  tasks:


Please open site.yml file and see that we are going to install:
 samba server for the hosts in the group: [fileservers], 
 mariadb server for hosts in the the group: [dbservers]
 and apache server and php for the hosts in the group: [webservers].

Below is the ansible-playbook command:
ansible-playbook --become -i inventory_with_groups


Issues faced: 
-------------

1. Package issue: we should use yum package manage rather than dnf 
   package manager because the CentOS 7 (aws EC2 instance) uses yum 
   package manager and not dnf. 
   
ansible all --become -m yum -a update_cache=true -i inventory_one_host

2. Connection issue: In inventory file: inventory_with_groups, 
   use host variable ansible_user for each target host.

In inventory_with_groups file, 
  
[webservers]
54.81.161.33 ansible_user=ubuntu

[dbservers]
54.175.125.10 ansible_user=centos  

[fileservers]
3.82.59.94 ansible_user=ubuntu

Testing using adhoc commands (dont forget option: all)
------------------------------------------------------
ansible  all -u centos  -i inventory_with_groups  -m ping
ansible  all -u centos  -i inventory_with_groups  -m gather_facts
ansible  all  --become -m yum -a update_cache=true -i inventory_one_host

########################
Ansible 10 - Adding tags 
########################

The group based targeting specific nodes can be further extended using tags. 
We specify tags using tags: key for a particular task in the playbook yaml file.

In the site.yml file:

- hosts: webservers
  become: true
  tasks:

  - name: Install apache and php packages for ubuntu servers
    tags: apache, apache2, ubuntu
    apt:
      name:
        - apache2
        - libapache2-mod-php
      state: latest
    when: ansible_distribution == "Ubuntu"

To target hosts having specific tags, we run anisble-playbook command as 
shown below.

ansible-playbook --list-tags site.yml
ansible-playbook --become --tags="apache, db" site.yml -i inventory_with_groups
ansible-playbook --become --tags centos  -i inventory_with_groups site.yml