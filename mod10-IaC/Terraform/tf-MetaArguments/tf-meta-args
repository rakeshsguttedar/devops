
Meta-arguments - special arguments that can be used within resource blocks to modify the behavior of
resources.

Meta-Arguments are 
1. depends_on
2. count
3. for_each
4. provider
5. lifecycle

depends_on
Terraform automatically creates a dependency graph based on references and thus enforces 
ordering of resources. Ordering of resources is used to ensure dependent resource are 
created before the main resource. But when terraform does not automatically determine
resource dependencies, we can use depends_on to specify dependencies between them.

Example usage:
resource "aws_instance" "example" {
    ami           = "ami-123456780"
    instance_type = "t2.micro"
    ...
    ...
    depends_on = {
        aws_iam_role_policy.example
    }

}

2. count is used to specify multiple resources or modules from a single block.
count is used when creating nearly identical resources such as multiple
EC2 instances, S3 buckets, etc..

count.index can be referenced for each resource.

count = 0 can also be used to prevent creation of a resource or modules. This is 
usually used in conjunction with conditional expression to selectively determine 
if the resource needs to be created.

resource "aws_instance" "example" {
    count = 4
    ami = "ami-123456780"
    instance_type = "t2.micro"

    tags = {
        Name = "Server-${count.index}"
    }
}

3. for_each (inside a dynamic block)

Repeated configrations can be moved to single block using dynamic block with for_each
see security_groups.tf

4. provider

It is used to implement multi region infrastructure setup in terraform
refer tf-advanced/multi_region.tf file.

# using alias keyword, implement multi region infrastructure setup in terraform
provider "aws" {
  alias = "us-east-1"
  region = "us-east-1"
}

provider "aws" {
  alias = "ap-south-1"
  region = "ap-south-1"
}

resource "aws_instance" "useast1" {
  ami = "ami-07d9b9ddc6cd8dd30"
  instance_type = "t2.micro"
  provider = aws.us-east-1
}

resource "aws_instance" "apsouth1" {
  ami = "ami-03f4878755434977f"
  instance_type = "t2.micro"
  provider = aws.ap-south-1
}

5. lifecycle

Lifecycle meta-arguments control how Terraform treats particular resources.

create_before_destroy
Specifying create_before_destroy = true indicates that if the resource does 
need to be destroyed, Terraform should first provision its replacement before 
destroying the deprecated resource. This can be useful for things such as 
zero downtime deployments.

resource "some_resource" "example" {
  # ...

  lifecycle {
    create_before_destroy = true
  }
}

ignore_changes
Sometimes an entity outside of terraform will automatically modify a resource 
(e.g. adding metadata, etc...). The ignore_changes argument allows you to ignore 
specific types of resource changes to prevent this from causing Terraform to 
attempt to revert those changes.

prevent_destroy
prevent_destroy provides an additional stopgap against accidentally destroying 
resources with terraform. If set to true, Terraform will reject any attempt to 
destroy that resource.


