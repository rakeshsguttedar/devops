// Swayam
// using specific node for building your jobs
// while writing the pipeline put the slave node LABEL like this

//   agent {
//        label 'docker-host'
//   }

// Here I have one master node and one slave node where in slave node I have docker installation,
// So when I run build for the pipeline it searches for the slave and create docker image there instead of the master node where jenkins is configured
// Sharing this as it brings more segregation
// This is the entire pipeline 

pipeline {
   agent {
        label 'docker-host'
    }
  stages {
    stage('Frontend') {
      steps {
        script{
          withDockerContainer(image: 'node:16-alpine', toolName: 'docker') {
            //sh "git --version"
            //sh "mvn -version"
            sh "node --version"
          }
        }
      }
    }
    stage('Backend') {
            steps {
               script {
                   // Define Docker image
                    def dockerImage = 'maven:3.8.1-adoptopenjdk-11'
                    // Run Maven commands inside a Docker container
                    docker.image(dockerImage).inside {
                        sh 'mvn --version'
                    }
                 }
               }
            }
    stage('SQL') {
            steps {
               script{
                   // Define Docker image
                    def dockerImage = 'mysql:latest'

                    // Run Maven commands inside a Docker container
                    docker.image(dockerImage).inside {
                        sh 'USE mysql;'
                        sh 'SELECT Host, User FROM user;'
                    }
                 }
               }
            }
    }
  }

// It has used images of node js which we use for FRONTEND
// java and build tool maven image as we use java for BACKEND
// and mysql image for DATABASE

pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git 'https://github.com/rakeshsguttedar/BoardgameListingWebApp.git'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
       stage('Trivy FS Scan') {
            steps {
                sh "trivy fs --format table -o trivy-report.html --scanners vuln,misconfig --severity CRITICAL  ."
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: ' --scan . ', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Sonarqube-Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' 
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BoardGame \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=BoardGame 
                    '''
                }
            }
        }
        stage("Build") {
            steps {
                sh "mvn clean package"
            }
        }
        stage('Deploy to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'cb5af48a-96fb-4582-91aa-95287090e71b') {
                     sh "mvn deploy"
                }
            }
        }
    }
}
