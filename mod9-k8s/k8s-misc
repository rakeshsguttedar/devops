Kubernetes - important points, tips, tit-bits, best practices, etc .

Master Node is K8s - 
There can be more than 1 master node in a k8s cluster. But it is recommended 
to have a single master node primarily for simplicity and ease of management, 
coft-effectiveness and for small-scale non-production kubernetes cluster such 
as for dev environment. 

However, there are scenarios where having multiple master nodes can provide 
advantages in terms of high availability, scalability, fault tolerance and load
balancing, making it suitable for production environments and larger Kubernetes 
clusters where reliability and performance are critical requirements.

kubeval - To validate the yaml manifests before applying
Installation:
wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
tar xf kubeval-linux-amd64.tar.gz
sudo cp kubeval /usr/local/bin

Jenkins user needs to be created in k8s cluster to allow jenkins
to deploy application to k8s cluster.

Troubleshooting issues in k8s -

ImagePullBackOffError
reasons could be
credentials to private registry
image may not exist

crashloopbackoffError
there could be many reasons.
To find the reason, we need to go inside the pod using
kubectl exec -it <pod-name> -- /bin/bash
and debug

kubeconfig file for kubernetes
Location of the kubeconfig file is /root/.kube/
cat /root/.kube/config
cluster information like server URL is needed by third party tool like Jenkins for 
deployment of application on k8s cluster.
Jenkins need serverURL, credentials, service account in k8s for deploying
an application in k8s cluster.

Setting up Jenkins
install java jdk17
install jekins

istio service mesh

Difference between K8s object and resource

The terms "object" and "resource" are often used interchangeably in the context
of Kubernetes, an object represents a desired state defined by users, while a 
resource represents an instance of that object managed by the Kubernetes API 
server within the cluster.

Doubts cleared:
Which tools are important for devops?
Tools very important for devops: CICD Tool, docker and k8s.

What are Upstream and Downstream processes in Devops?
These terms are used with respect to cicd and gitops. Say for 
example, we have Jenkins job1 and job2 where job2 is dependent on
job1 to complete, i.e. job 2 will be triggered after job1 is completed.
Job1 process is upstream process as it produces the artifacts and 
job2 is the downstream process as it consumes the artifacts to deploy 
them in production or testing environment.

In summary, upstream processes are those that come before in the pipeline
and produce artifacts or changes, while downstream processes are those that 
come after and consume or utilize those artifacts or changes. 

What are GroupId and ArtifactId?
GroupId: refers to the organisation or company that owns the whole project.
ArtifactID: name of the project used in the context of pushing of artifact
to Nexus using NexusArtifactUploader plugin in Jenkins.

Security in kubernetes - best practices
How to encrypt etcd for secrets?
Encrypting etcd data, including secrets, helps enhance the security of your 
Kubernetes cluster by ensuring that sensitive information stored in etcd is 
protected from unauthorized access. Here's how you can encrypt etcd for secrets:

1. Generate Encryption Key:
2. Configure etcd Encryption:
3. Create Encryption Configuration File:
4. Restart etcd Pod:
5. Verify Encryption:

1. **Generate Encryption Key**:
   - First, you need to generate an encryption key that will be used to encrypt 
     and decrypt data stored in etcd. You can generate a key using a tool like `openssl`:
     ```
     openssl rand -hex 32
     ```

2. **Configure etcd Encryption**:
   - Once you have the encryption key, you need to configure etcd to use it for 
     encryption. This typically involves adding the encryption key to the etcd 
     configuration file.
   - For example, in a Kubernetes cluster managed by `kubeadm`, you can edit the 
     etcd configuration file located at `/etc/kubernetes/manifests/etcd.yaml` and 
     add the encryption key under the `etcd` container's command-line arguments:
     ```yaml
     apiVersion: v1
     kind: Pod
     metadata:
       name: etcd
       namespace: kube-system
     spec:
       containers:
       - command:
         - etcd
         - --data-dir=/var/lib/etcd
         - --encryption-provider-config=/etc/kubernetes/pki/etcd/encryption-config.yaml
         - --cert-file=/etc/kubernetes/pki/etcd/server.crt
         - --key-file=/etc/kubernetes/pki/etcd/server.key
         - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
         image: k8s.gcr.io/etcd:latest
         ...
       ...
     ```

3. **Create Encryption Configuration File**:
   - Next, create an encryption configuration file (`encryption-config.yaml`) that specifies 
     the encryption key:
     ```yaml
     kind: EncryptionConfiguration
     resources:
       - resources:
           - secrets
         providers:
           - aescbc:
               keys:
                 - name: key1
                   secret: <encryption-key>
     ```
     Replace `<encryption-key>` with the actual encryption key generated in step 1.

4. **Restart etcd Pod**:
   - After making changes to the etcd configuration and encryption configuration files, 
     you need to restart the etcd pod for the changes to take effect. In a Kubernetes 
     cluster managed by `kubeadm`, you can restart the etcd pod by restarting the kubelet service:
     ```
     sudo systemctl restart kubelet
     ```

5. **Verify Encryption**:
   - Once etcd is restarted with the new configuration, you can verify that encryption 
     is enabled by checking the etcd logs or querying etcd to ensure that the stored 
     secrets are encrypted.

By following these steps, you can encrypt secrets stored in etcd, thereby enhancing the 
security of your Kubernetes cluster and protecting sensitive information from unauthorized access.

EKS Best practices Guide at
https://aws.github.io/aws-eks-best-practices/