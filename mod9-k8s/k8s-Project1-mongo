Kubernetes Project 1
mongodb backend and mongoexpress frontend
in k8s cluster

Deploying mongodb and mongo-express in k8s cluster using
k8s resources - deployment, service, configmap, secrets,
PersistentVolume and PersistentVolumeClaim (PVC)

1. front end - mongo express is front end running on port 8081
2. back end -   mongodb is a database on default port 27017

mongo express and mongodb environment variables to store
credentials can be found in official dockehub page of mongodb.
https://hub.docker.com/_/mongo

Credentials in k8s Secrets objects
mongoexpress uses 4 environment varibles to store the credentials.
2 for basic authentication to its front end UI
ME_CONFIG_BASICAUTH_USERNAME=admin
ME_CONFIG_BASICAUTH_PASSWORD=123

2 for accessing the mongodb server
ME_CONFIG_MONGODB_ADMINUSERNAME=admin
ME_CONFIG_MONGODB_ADMINPASSWORD=123

These variables are stored as credentials in mongo-express-secret.
For storing mongodb credentials, we use Secrets named mongodb-secret.
secrets are stored using base64 encoding. admin is base64 encoded as 
YWRtaW4= and 123 is base64 encoded as MTIz

Access mongo-express and mongodb using k8s configMap and k8s Service.
mongoexpress pod is going to access mongodb server pod using 
mongodb-service which is configured in a k8s configMap with 
mongodb-configmap as key and mongodb-service as its value 
(with the name db_host). mongo-express pod spec defined inside 
mongo-express deployment resource has 
.spec.template.spec.containers.env.name key to use the server url
to access the mongodb-configmap.

mongo-express-service is used to access mongo-express pod which
exposes user to access its UI through NodePort type service.

PersistentVolume resource is used to store data of mongodb database.
This PersistentVolume can be used through PersistentVolumeClaim
resource.

To create a Persistentvolume, make sure to create a directory 
mkdir -p /home/ubuntu/mongo/mongo-vol in master node

mongo.yaml file - all resources in one single file

To create the resources in k8s cluster, run command

kubectl apply -f mongo.yml
Note: Validate this yaml file using an online yaml validator or use 
kubeval tool.

kubectl get all

NAME                                 READY   STATUS    RESTARTS   AGE
pod/mongo-express-76bd65b78f-pq4ts   1/1     Running   0          97s
pod/mongodb-5d569c558-mdq2k          1/1     Running   0          98s

NAME                            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
service/kubernetes              ClusterIP   10.96.0.1       <none>        443/TCP          7m7s
service/mongo-express-service   NodePort    10.99.96.232    <none>        8081:30517/TCP   97s
service/mongodb-service         ClusterIP   10.99.188.150   <none>        27017/TCP        98s

NAME                            READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/mongo-express   1/1     1            1           98s
deployment.apps/mongodb         1/1     1            1           98s

NAME                                       DESIRED   CURRENT   READY   AGE
replicaset.apps/mongo-express-76bd65b78f   1         1         1       98s
replicaset.apps/mongodb-5d569c558          1         1         1       98s


After some time, access the mongo-express UI in a browser using the Worker Node
public IP address and port 30517 generated for mongo-express-service.

http://3.228.16.69:30517/

Enter username and password to login

mongo.yaml

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /home/ubuntu/mongo/mongo-vol

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-configmap
data:
  db_host: mongodb-service

---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque
data:
  username: YWRtaW4=
  password: MTIz

---
apiVersion: v1
kind: Secret
metadata:
  name: mongo-express-secret
type: Opaque
data:
  mduser: YWRtaW4=
  mdpass: MTIz
  meuser: YWRtaW4=
  mepass: MTIz

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: password
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongo-express
          image: mongo-express
          ports:
            - containerPort: 8081
          env:
            - name: ME_CONFIG_BASICAUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-express-secret
                  key: meuser
            - name: ME_CONFIG_BASICAUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-express-secret
                  key: mepass
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: username
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: password
            - name: ME_CONFIG_MONGODB_SERVER
              valueFrom:
                configMapKeyRef:
                  name: mongodb-configmap
                  key: db_host

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
spec:
  selector:
    app: mongo-express
  type: NodePort
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081