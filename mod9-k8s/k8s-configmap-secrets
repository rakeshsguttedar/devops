Kubernetes - ConfigMap and Secrets

ConfigMap

Configmap and Secrets in kubernetes are used to store application specific data.
kubernetes uses etcd for storing these configMap and Secrets data.

                                      ConfigMap
                                          |
                        User <---> App(backend)  <---> DB 
                                      Env vars      DBURL, PORT, username, password

ConfigMap is a store for the application configuration data. These configuration
data cannot be hard-coded inside the application because this data might change
in the future. Example, the database connection URL and PORT.

We can retrive this data during application lifecycle using environment variables
or using volume mounts.

USER ->  configMap in YAML manifests -> kubectl apply -> API server -> etcd

Why Volume mounts are preferred to environment variables to access configMap data?
The configMap data that is accessed using environment variables can change and this change
of data does not get updated in the environment variables. We need to explicitly restart the
pods or re-deploy the application to update the enviroment variable. This cannot be done in
the live production environment as it might affect the existing users of this application.
Therefore, we use VolumeMounts file to use the configMap data. Further down you can see the
demonstration.

We can also access the configMap data stored in the environment variable programmatically
using using system libraries. For example, we can use OS package in python program to access
environment variable using os.env().

Hands-on

# cm.yml                 
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-cm
data:
  db-port: "3306" # mysql port

kubectl apply -f cm.yml

#deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-python-app
  labels:
    app: sample-python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-python-app
  template:
    metadata:
      labels:
        app: sample-python-app
    spec:
      containers:
      - name: python-app
        image: abhishekf5/python-sample-app-demo:v1
        env:
         - name: DB-PORT
           valueFrom:
            configMapKeyRef:
             name: test-cm
             key: db-port
        ports:
        - containerPort: 8000


kubectl apply -f deployment.yml

kubectl exec -it sample-python-app-5894dd7f76-9f868 -- /bin/bash
$ env | grep db

When we  change the db port in cm.yml and apply the changes in cm.yml,
the environment variable in the pod will not be updated unless the pod
is restarted.

# cm.yml                 
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-cm
data:
  db-port: "3307" # mysql port

#deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-python-app
  labels:
    app: sample-python-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-python-app
  template:
    metadata:
      labels:
        app: sample-python-app
    spec:
      containers:
      - name: python-app
        image: abhishekf5/python-sample-app-demo:v1
        volumeMounts:
          - name: db-connection
            mountPath: /opt
        ports:
        - containerPort: 8000
      volumes:
        - name: db-connection
          configMap:
            name: test-cm

kubectl apply -f deployment.yml 

kubectl get pods
NAME                                 READY   STATUS    RESTARTS   AGE
sample-python-app-6c5b459cc9-m65s4   1/1     Running   0          3m59s

kubectl exec -it sample-python-app-6c5b459cc9-m65s4  -- /bin/bash

ls /opt
db-port

cat /opt/db-port | more
3307

Hence we need to use the volumeMount instead of environment variables
to store the configMap data.

Secrets

Secrets in k8s is used to store the sensitive information such as credentials, tokens.
Secrets store the data in base64 encoding. Hence the sensitive data is encrypted at rest.
Example database username and password are stored in k8s etcd. It is encypted at rest 
using base64 encoding.

Command to list the secret  in k8s 

kubectl get secrets -A 


kubectl create secret generic test-secret --from-literal=db-port="3306"
secret/test-secret created

kubectl edit secret test-secret
# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: v1
data:
  db-port: MzMwNg==
kind: Secret
metadata:
  creationTimestamp: "2024-02-21T08:46:58Z"
  name: test-secret
  namespace: default
  resourceVersion: "7261"
  uid: 0e1486d3-f3fc-4a98-b049-3e664694f55f
type: Opaque

echo "MzMwNg==" | base64 --decode

The secrets encyption in k8s using base64 encoding is not robust
as it can be easily decoded.

Secrets handle small amounts of sensitive data to reduce the risk of accidental exposure
of confidential information. Secret data should be stored and handled in a way that can 
be easily hidden and possibly encrypted at rest if the environment is configured as such. 
Kubernetes is insecure by default. This extends to Secrets because they are not encrypted. 
As soon as the Secret is injected into the Pod, the Pod itself can see the Secret data in 
plain text.

Secrets are stored inside the Kubernetes data store (i.e., an etcd database) and are created
before they can be used inside a Pods manifest file. Furthermore, Secrets have a size limit
of 1 MB. When it comes to implementation, you can either mount Secrets as volumes or expose 
them as environment variables inside the Pod manifest files.

Therefore we need to encrypt the etcd.
How to encrypt etcd for secrets?

Kubernetes Security Best practices -

1. Use strong RBAC to store the secrets because a hacker can access kubernetes data using 
   kubectl describe and kubectl edit commands.
2. Use the principle of least privilage. This means, less number of people has access and 
   least permitive actions are allowed.
3. We should encrypt the etcd.

Refer 
https://www.airplane.dev/blog/kubernetes-secrets


