kubernetes - Ingress Setup

We are going to setup an Ingress for accessing 10 micro-services application
in AWS EKS cluster. 

Prerequisite: An AWS account.

This project is a follow-up project of EKS 10 micro-services project.
Therefore some EKS steps are ommited here for brevity. 
Please follow steps in k8s-project4-eks file for setting up an EKS cluster. 

We need an IAM user with necesaary permissions to setup the ingress
for AWS EKS.

In AWS Console:
Create an IAM user: eks-iam-user with the following permissions

IAMFullAccess
AmazonEC2FullAccess
AmazonEKS_CNI_Policy
AmazonEKSClusterPolicy
AmazonEKSWorkerNodePolicy
AWSCloudFormationFullAccess
custom policy: eks-full-access
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "eks:*",
            "Resource": "*"
        }
    ]
}

Generate access key and secret access for eks-iam-user

Setting up the Virtual machine in AWS console:
We will use EC2 instance of type t2.micro and 8 GiB storage 

EKS Cluster Setup Steps: (see k8s-project4-eks file)

install awscli, eksctl, kubectl, create EKS Cluster, associate OIDC 
connect provider wih EKS and create nodegroup.

Ingress setup:

1. Create IAM Policy
2. Create iamserviceaccount
3. Install an Ingress Controller 
4. Create Ingress Class
5. Deploy the application in EKS cluster
6. Create Ingress resource (ingress rules)
7. Access the application using ingress url

1. Create IAM Policy

mkdir ingress-project && cd ingress-project

curl -o iam_policy_latest.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json

aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy_latest.json

2. Create iamserviceaccount

eksctl create iamserviceaccount \
  --cluster=my-eks-cluster \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --attach-policy-arn=arn:aws:iam::<Account-ID>:policy/AWSLoadBalancerControllerIAMPolicy \
  --override-existing-serviceaccounts \
  --approve

3. Install an Ingress Controller

Install Helm chart as Helm is needed for installing Ingress controller.

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh

helm repo add eks https://aws.github.io/eks-charts
helm repo update eks

Install AWS ALB ingress controller

helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=my-eks-cluster \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller \
  --set region=ap-south-1 \
  --set vpcId=vpc-0f54b641019bda3e7

AWS Load Balancer Ingress Controller:

The AWS Load Balancer Controller watches for changes to ingress resources 
in the Kubernetes cluster. When a new or updated ingress resource is detected, 
the controller automatically provisions and configures the corresponding AWS 
Elastic Load Balancer (ELB) or Network Load Balancer (NLB) to route traffic 
based on the rules defined in the ingress resource.

4. Create Ingress Class

We need an ingress class for the ingress controller as there could be 
many ingress controller in a k8s cluster.
The spec.controller: ingress.k8s.aws/alb identifies the controller for 
which this ingress class object is created.
Ingress class is also used to associate ingress resource with a particular
ingress controller, in our case, the AWS Load Balancer Controller.

# ingress-class.yml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: my-aws-ingress-class
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: ingress.k8s.aws/alb

5. Deploy the application

Download from
wget https://raw.githubusercontent.com/rakeshsguttedar/10-MicroService-Appliction/latest/deployment-service.yml

Edit this document and remove frontend-external LoadBalancer type service
as we only need frontend NodePort service type for ingress.

kubectl apply -f deployment-service.yml
kubectl get pods

6. Create Ingress resource (ingress rules)

# ingress-resource.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-cpr-demo
  annotations:
    alb.ingress.kubernetes.io/load-balancer-name: cpr-ingress
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP 
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'   
spec:
  ingressClassName: my-aws-ingress-class
  rules:
    - http:
        paths:           
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port: 
                  number: 80

7. Access the application using ingress url

Run the command: 
kubectl get ingress 
to confirm ingress object is created.

Use ADDRESS field value in ingress object to access the 10 micro-services application from the browser.