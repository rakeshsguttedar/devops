Kubernetes Service
Kubernetes service allows applications deployed on the k8s cluster to communicate
among themselves and using service we can expose applications to be accessed from
outside the k8s cluster.

Kunernes command to list all the service resourced in a k8s cluster:
kubectl get svc

Different types of Kubernetes services:

I. ClusterIP:

default type of service. 
It exposes the service on an internal IP within the cluster. This means that the service is 
only reachable from within the cluster and is not accessible from outside the cluster.

Use Cases: ClusterIP is often used for services that need to communicate with other services 
within the cluster, but do not need to be accessed from outside the cluster. For example, a 
database service that other services in the cluster need to connect to.

II. NodePort:

NodePort exposes the service on a specific port on each node in the cluster.
This means that the service is accessible via <NodeIP>:<NodePort>. 
Kubernetes automatically routes traffic that is sent to this port to one of the service's pods.

Use Cases: NodePort is useful when you need to expose a service to the outside world. 
It's typically used in development or testing environments. It's not generally used in production
as it exposes the service on all nodes, which might not be desirable.

Hands-on Demo:
NodePort demo using Ekart application deployed on the k8s cluster

1. copy the below yam file in a ekart.yml file
ekart.yml file

apiVersion: apps/v1
kind: Deployment # Kubernetes resource kind we are creating
metadata:
  name: ekart-deployment
spec:
  selector:
    matchLabels:
      app: ekart
  replicas: 2 # Number of replicas that will be created for this deployment
  template:
    metadata:
      labels:
        app: ekart
    spec:
      containers:
        - name: ekart
          image: adijaiswal/ekart:latest # Image that will be used to containers in the cluster
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8070 # The port that the container is running on in the cluster

2. deploy the ekart application using:
kubetcl apply -f ekart.yml

3. Know the exposed port on the node using:

kubectl get svc

NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
ekart-ssvc   NodePort    10.111.241.89   <none>        8070:32238/TCP   19m

4. Access within the host machine using:
curl -I -v http://localhost:32238

III. LoadBalancer:

provides external access to the service by setting up a load balancer that distributes traffic
across all the pods in the service. The external load balancer is provisioned by the cloud 
provider (like AWS, GCP, Azure) and it assigns a public IP address to the service.

Use Cases: LoadBalancer is used when you want to expose a service to the internet. 
This is typically used in production environments where you want to ensure high availability 
and distribute incoming traffic across multiple pods.

Note: Service type LoadBalancer will not generate an external IP in an AWS EC2 instances
because it needs an interface to interact with the cloud provider, in this case the AWS.
The Cloud Controller Manager component of k8s is needed to be configured for self-hosted
k8s cluster.

Disadvantages of LoadBalancer Service Type
1. IP address generated by AWS or by any cloud provider is chargeable.
2. LoadBalancer Mode does not provide an enterprise level support like whitelisting, 
   path based and domain based routing, sticky sessions.. etc
3. Security feature is missing.

To overcome these issues, k8s has come up with ingress resource.
For ingress resource, we need to extend the k8s by adding custom resource definition (CRDs) 
and we need to install ingress controller.
