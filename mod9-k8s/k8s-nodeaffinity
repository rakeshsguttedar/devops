Kubernetes Node Affinity and Node anti-Affinity

I. Assign Pods to Nodes

Refer official kubernetes
https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/

We can assign the pods to specific nodes using
A. node labels - set labels on nodes and configured this label in pod specs 
                 using nodeSelector 
B. nodeName -    configured in pod specs to schedule the pod to run on a 
                 specific node using setting nodeName

A. node labels
1. set label on a node 
kubectl label nodes node1 disktype=ssd

2. Check the set label
kubectl get nodes --show-labels

3. Create a pod that gets scheduled to your chosen node
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    env: test
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
  nodeSelector:
    disktype: ssd

4. Apply above manifest to create a pod
kubectl apply -f https://k8s.io/examples/pods/pod-nginx.yaml

5. Verify that the pod is running on your chosen node:
kubectl get pods --output=wide

B. nodeName
1. Create a pod that gets scheduled to specific node 
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  nodeName: foo-node # schedule pod to specific node
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent

2. apply the above manifest and check whether the pod is scheduled on foo-node
kubectl apply -f https://k8s.io/examples/pods/pod-nginx-specific-node.yaml



II. Node affinity and Anti-affinity

We can contstrain a pod so that it is
1. restricted to run on particular node(s)
2. prefers to run on particular node(s)

nodeSelector is the simplest mechanism to constrain a pod
to run on a node matching the label set on it.

But this constraining can be expanded using node affinity and anti-affinity
where it provides the following benefits - 
1. expressiveness - nodeSelector only selects nodes with all the specified labels. 
   Affinity/anti-affinity gives you more control over the selection logic.
2. soft/preferred - the scheduler still schedules the Pod even if it can't find a 
   matching node.
3. co-location of pods - using labels on other Pods running on the node (or other 
   topological domain), instead of just node labels, we can schedule pods to run
   on a node so that they are co-located in a single AZ

The affinity feature consists of two types of affinity:

Node affinity functions like the nodeSelector field but is more expressive and allows
you to specify soft rules.
Inter-pod affinity/anti-affinity allows you to constrain Pods against labels on other Pods.
i.e. Inter-pod affinity specifies rules for pod scheduling based on the attributes of other
pods running in the cluster. You can use inter-pod affinity to either attract pods to nodes 
that already have certain pods (affinity) or repel pods from nodes that already have certain 
pods (anti-affinity), depending on your requirements.

How do you specify the inter-pod affinity?
Inter-pod affinity is typically specified within the pod's configuration or deployment 
specifications.

Use cases of ainter-pod affinity and inter-pod anti-affinity:
Use inter-pod affinity when you want to co-located pods for improved locality or performance 
or if there is frequent communication between pods.

Use inter-pod anti-affinity when you want to ensure that certain pods are not co-located 
with other pods to improve fault tolerance and availability.

Node Affinity types: 
requiredDuringSchedulingIgnoredDuringExecution
preferredDuringSchedulingIgnoredDuringExecution

Refer official documentation for the hands-on and for more detailed description
https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity/

nter-pod affinity and anti-affinity can be even more useful when they are used with higher level
collections such as ReplicaSets, StatefulSets, Deployments, etc. These rules allow you to 
configure that a set of workloads should be co-located in the same defined topology; for example, 
preferring to place two related Pods onto the same node.

nodeName
nodeName is a more direct form of node selection than affinity or nodeSelector. nodeName is a 
field in the Pod spec. If the nodeName field is not empty, the scheduler ignores the Pod and 
the kubelet on the named node tries to place the Pod on that node. Using nodeName overrules 
using nodeSelector or affinity and anti-affinity rules.

Some of the limitations of using nodeName to select nodes are:

If the named node does not exist, the Pod will not run, and in some cases may be 
automatically deleted. 
If the named node does not have the resources to accommodate 
the Pod, the Pod will fail and its reason will indicate why, for example OutOfmemory 
or OutOfcpu.
Node names in cloud environments are not always predictable or stable.