Sonarqube

Background:

CICD pipeline involves the following steps:

1. Git checkout of source code
2. Code is compiled and Code is tested

After the Source code is checkout from Git and all tests are performed on it,
the source code needs to under go quality check to rule out any issues it it.
We need to perform static code analysis to identify any security issues.
For static code analysis of our projects, we use Sonarqube.

What is Sonarqube?

Sonarqube is SAST tool. SAST stands for Static Application
Security Testing. That is, it is a static code analysis tool
that is used to anaylse the source code after all the tests
are run on it but before we build the application and generate
artifacts. 

The static code analysis of source code involves two steps:
  1. Code Quality check
  2. Code Coverage check

In code quality check, an application might have different kinds
of issues with respect to the source code.

Types of issues with the source code:

1. Bugs - Code not Working as expected
2. Vulnerabilities - specific part of code which is weak and is prone to attacks. 
3. Code Smell - point in source code which might cause some issue in future.
   A maintainability issue that makes your code confusing and difficult to maintain.
4. Code duplication - parts of code which are identical or repeated
   mmight be fixed by creating functions for the repeated code.
5. Technical debt -The estimated time taken by developer to fix these
   issues is known as Technical Debt. It is called as Debt because the
   time taken to fix these issues can be spent on some other task.

Best Part of Sonarqube: 
Sonarqube can identify the issues and shows us where exactly in the source
code the issues are present.

How do you say that the source code is of good quality? 
Lesser the number of issues in source code, better is the quality of source code.

Code Coverage:
Code Coverage is the percentage of source code that is
covered in functional testing of the application. 
If 80% of source code is tested, then code coverage is 80%

Example:
Suppose if an application which is having 100 lines of source code
and if there are 10 test cases that test all functionalities of
the code and if those test cases cover or go through all hundred
lines of the source, then we say that the code coverage is 100%.
If only 80 lines of source code is covered, then code coverga is
80%.

How do we get these results.?
We have third party tool, jacaco, which generates
a report after code scanning. That report will be shared to
sonarqube server and only sonarqube can read that report. 
Sonarqube will interpret that report and it displays it for us in a human readable form.

80% is considered usually considered a good code coverage.

Sonarqube 2 versions:
Developer Version - Paid version - supports analysis of 1M lines of code and more
                    and multiple branches of source code.
Community Version - Free - limited with respect to amount of lines source code scanned
                    and analyse only master/main branch of the source code. 

Community Branch Plugin of sonarqube allows analysis on all branches of source code.
Its is a third-party plugin supported by sonarqube community.
For projects having very large number of lines of code, we have to use Developer version
of Sonarqube.

Installing Sonarqube:

docker method is the simplest and easiest method to install and run sonarqube.

Verion: sonarqube 9.9 lts version.
https://hub.docker.com/_/sonarqube


  docker run -d -p 9000:9000 sonarqube:lts-community

Access it: http://ipaddress:9000

-> Login -> username/password: admin/admin 
-> Change password -> add new password

-> Adminstration -> Marketplace
to install plugins in sonarqube

Check sonarqube verion: 
Sonarqube UI -> Administration -> System
Search in google, plugin matrix to identify supported
plugin version and Sonarqube version

Sonarqube UI -> Administration -> Projects -> Background Tasks 
the success or failure of the sonarqube tasks

Administration -> Security -> Users
Generate token and use it to authenticate sonarqube from another tool.

How does the sonarqube understands the source code language?
Administration -> Configuration - > Language -> File Suffixes

How exactly Sonarqube performs the analysis?

Quality Profiles - specific to programming language

Profiles are language specific rules based on which sonarqube can 
perform quality checks, perform analysis and identify issues in code.

We cannot edit or change the default Profile provided by sonarqube. 
But we can create a copy of the profile and activate or inactivate
specific rules and use that copy of profile for our project.

From where these Quality Profiles are installed.
It is through Plugins of Programming languages installed by Sonarqube by default.

Quality Gates: Conditions or criteria that can be used to set the quality criteria
in order to pass or fail the quality tests.

Code Coverage configurations:
jacoco - JAvaCOdeCOverage - a third party code coverage tool for java based projects
istanbul - for code coverage of nodejs projects.

We need to add three sections in pom.xml for using jacoco for code coverage:
1. Properties
<properties>
    <!-- JaCoCo Properties -->
    <jacoco.version>0.8.7</jacoco.version>
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
    <sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
    <sonar.language>java</sonar.language>
</properties>

2. Plugin
<plugin>
    <groupId>org.jacoco</groupId>
    <artifactId>jacoco-maven-plugin</artifactId>
    <version>${jacoco.version}</version>
    <executions>
        <execution>
            <id>jacoco-initialize</id>
            <goals>
                <goal>prepare-agent</goal>
            </goals>
        </execution>
        <execution>
            <id>jacoco-site</id>
            <phase>package</phase>
            <goals>
                <goal>report</goal>
            </goals>
        </execution>
    </executions>
</plugin>

3. Dependencies
<dependency>
    <groupId>org.jacoco</groupId> 
    <artifactId>jacoco-maven-plugin</artifactId>
    <version>0.8.7</version>
</dependency>

Configuring Jenkins and Sonarqube to run Sonarqube-Analysis in Jenkins:

1. Jenkins: Installing plugins Eclipse Temurin and Sonarqube Scanner
   Dashbaord -> Manage Jenkins -> Plugins
2. Jenkins: Configuring jdk, maven and sonar-scanner plugins in Tools
   Dashbaord -> Manage Jenkins -> Tools
3. Sonarqube: Generate Sonarqube server login Secret token:
    Adminstration -> Security -> Users -> Name: token  
    -> Generate token -> save this token for using it in the next step.
4. Jenkins: Adding Sonarqube login token in Jenkins Credentials store
   Dashbaord -> Manage Jenkins -> Credentials -> secret text
   paste the token generated in step 3.
5. Jenkins: Adding Sonarqube server URL in Jenkins System Configuration
   Dashboard -> Manage Jenkins -> System
6. Adding SonarScanner tool as part of Jenkins environment variables
    environment {
        SONARQUBE_HOME= tool 'sonar-scanner'
    }
7. Adding Sonarqube Analysis stage in Jenkins pipeline script:

Using Generate Pipeline Script, select withSonarQubeEnv and generate
the script, edit withSonarQubeEnv and add it to the Analysis stage:  

  stage('Sonarqube-Analysis') {
    steps {
      withSonarQubeEnv('sonar') {
        sh '''
          $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Boardgame \
          -Dsonar.projectKey=Boardgame -Dsonar.java.binaries=. '''
      }
    }
  }

Configuring Jenkins and Sonarqube for Quality Gate check:

1. Adding Sonarqube Webhook for notifying Jenkins
We can configure sonarqube to notify Jenkins when the quality Analysis is completed.
We can add a webhook in sonarqube. Using this webhook, sonarqube will send a HTTP POST 
request including a JSON payload to Jenkins notifying it that Quality Analysis is done.

In sonarqube UI, go to Administration -> Configuration -> Webhooks
-> Create 
-> Name: Jenkins
-> URL: Jenkins URL http://<ipaddress:8080>/sonarqube-webhook/ 
-> Secret: optonal
-> Create

2. Adding Quality Gate stage in Jenkins:

In Jenkins UI, use Generate Pipeline Syntax to select waitForQualityGate and 
generate the script and add it to the steps block of Quality Gate stage.

This step pauses Pipeline execution and wait for previously submitted SonarQube
analysis to be completed and returns quality gate status. Setting the parameter
abortPipeline to true will abort the pipeline if quality gate status is not green.

Below is the Jenkins Quality Gate Check stage to wait for Quality gate to pass:

  stage('Quality Gate Check') {
    steps {
      waitForQualityGate abortPipeline: false
    }
  }

Below is the complete pipeline script for this project.

pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SONARSCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git 'https://github.com/jaiswaladi2468/BoardgameListingWebApp.git'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Unit Tests') {
            steps {
                sh "mvn test"
            }
        }
        stage('Package') {
            steps {
                sh "mvn package"
            }
        }
        stage('Sonarqube-Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
                    $SONARSCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BoardGame \
                    -Dsonar.projectKey=BoardGame -Dsonar.java.binaries=. '''
                }
            }
        }
        stage('Quality Gate check') {
            steps {
                waitForQualityGate abortPipeline: false
            }
        }
    }
}

Sonarqube troubleshooting:

We used to upgrade all tools quarterly.
The project was setup in Kubernetes. Sonarqube was giving 
crashLoopBackoff error after upgrade. sonarqube pod was having
a java plugin which was having two versions we removed the older
version of the plugin and restarted the pod.

What if the plugin is not available in the market place?

Going to backend of sonarqube to install third party sonarqube plugins other than marketplace
plugins?

  docker exec - it containerID /bin/bash
  (in kubernetes we should go into kubernetes pod)
  cd /extension/plugin
  wget https://github.com/mc1arke/sonarqube-community-branch-plugin/releases/download/1.18.0/sonarqube-community-branch-plugin-1.18.0.jar
  exit

restart the docker container
  docker restart continaerID
  docker ps

  Wait for the sonarqube to be up.
After restart, login to sonarqube server.
Accept the Risk as the plugin is a third-party plugin.

WRT sonarqube, make sure you ensure Interviewer ask more questions in sonarqube as
sonarqube is much simpler.
Interview Questions?

When should we run sonarqube analysis?
We should tell that after the test cases have run we 
ran sonarqube analysis.

Why should be able to run Sonarqube analysis on feature branch
or another branch other than master/main?

To detect issues with the code much earlier in the development
lifecycle.