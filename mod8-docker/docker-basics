What are the problems associated with the traditional approach of application development?

Sceanrio 1:

Suppose there is a java based application that needs to be developed and 
delivered to the customer. What is required to develop and run this application?

1. A Linux Machine - Operating System on which it will be run.
2. jdk11 - Java to develop and for runtime
3. 8080 - port on which this app will be running -standard/defined by the developer
4. java -jar app-name.jar - runtime environement for the app to run

Once an application is completely developed, it needs to be released/delivered to the
customer so that it is tested in their environment. Setting of the customer environment 
to run the application is a time consuming process because it involves many configuration
steps to be performed. This is always looked as an overhead and in this fast paced world
customer would want to deploy and run the application in much less time as possible. 

Scenario 2:

Many applications developed earlier were deployed to run on a standalone physical servers. 
In physical servers, most of the system resouces would often be idle as applications
needed very less processing time and memory. So in order to completely utilize the physical
server resources, Virtual Machines were invented . Virtual machines virtualises the 
hardware in the OS and there by allowing us to run multiple OSs on a single physical server.
Even with the VMs, the applications would use less system resources of VMs and hence there
was a need felt for much lighweight version of the Virtual machines that would be very easy to
setup, maintain and share. 

Sceanrio 3:

Monolithic applications:
Applicaitons developed in earlier days were monolothic. Monolithic applications are
huge application executable or binary that often have complex architectures and are
very difficult to manage. So inorder to reduce the complexities of developing the 
applications, microservice arhcitecture is being adopted across organisations. 
With microservices, the aplication is split it into a number of smaller applications
or components with each component performing a specific task or functioonality. For
example, the ecommerce application has a seperate service to handle payments, user
account management, database management, product portfolio management, etc.

To overcome these problems of application development and sharing of these application,
we build the the application along with its runtime environment and small parts of the
operating system to create a package so that it is easy to share and use. 
This packaged application is called a docker image. This image can be easily created,
shared and run in the customer environment. It is lightweight in nature compared to the
Virtual Machine as it will not have a complete Operating System. Also we can run multiple
versions of the application on the same Operating System by building and running multiple
images of the same application. 

Coming back to the above mentioned java based application, we package the application
along with its runtime(jdk11), its dependencies, system dependencies and part of the Linux OS
into an image called docker image. This image can be easily shared so that it can 
deployed and run in the customer environment with much ease. 
The docker image can be run as a container as it will share the resources of the underlyging OS
and system libraries.


What is docker?
Docker is a containerisation platform that is used to create container images
of applications and these images can be run as containers, pushed to and 
pulled from registry to allow sharing and deploying of these containerised
applications.

Docker installation:

  sudo apt update
  sudo apt install docker.io -y
  sudo systemctl start docker

  sudo usermod -aG docker <linuxuseraccount>
  newgrp docker
  sudo systemctl stop docker
  sudo systemctl start docker

   docker run hello-world # to test docker is installed and configured

Docker Terminologies:

Docker Daemon, dockerfile, docker build, docker images, docker container, docker run,
docker registry, docker push, docker pull, docker Desktop

Docker lifecycle:
1. docker build using Dockerfile - a set of instructions to docker daemon to build a docker image
2. docker run: run the docker image by creating a container from the image
3. docker login - login to the docker registry to push the docker image to the registry
4. docker push - Upload the image of the docker image to the docker registry
5. docker pull - download the image from the docker registry to be used to run in a container.

Dockerfile:

FROM openjdk:8u151-jdk-alpine3.7
EXPOSE 8080
ENV APP_HOME /usr/src/app
COPY target/*.jar $APP_HOME/app.jar
WORKDIR $APP_HOME
CMD ["java", "-jar", "app.jar"]

To build the image we run
  docker build -t java_app:latest .

To run this image in a docker container,
  docker run --name java_app -p 8080:8080 -d java_app:latest

create uour docker hub account at http://hub.docker.com
To login to the docker registry. For first time login,
it will prompt you for the password.
  docker login -u yourdockerhubaccountusername

To push the image to public docker registry
  docker tag java_app:latest yourdockerhubaccountusername/java_app:latest
  docker push yourdockerhubaccountusername/java_app:latest

To pull the image from the public docker hub registry
docker pull yourdockerhubaccountusername/java_app:latest
