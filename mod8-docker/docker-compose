Docker compose:
Docker Compose is a tool for defining and running multi-container
Docker applications. It allows you to define your application's 
services, networks, and volumes in a single docker-compose.yml file,

Docker compose allow us to define an entire application stack
involving docker services, volumes, network etc in a single yaml file,
making it easier to manage complex Docker setups. 

Example setup of docker-compose:

For example, mongo-express front end container and mongodb backend
database container can be defined and setup using docker-compose.

# Installing docker compose 
sudo apt install docker-compose -y


mongodb and mongo-express configuration without docker-compose:

# Start MongoDB container

docker run -d -p 27017:27017 --network mongo-network --name mongodb \
-e MONGO_INITDB_ROOT_USERNAME=admin \
-e MONGO_INITDB_ROOT_PASSWORD=123 \
mongo

# Start Mongo-Express Container

docker run -d -p 8081:8081 \
  --network mongo-network \
  --name mongo-express \
  -e ME_CONFIG_MONGODB_SERVER=mongodb \
  -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
  -e ME_CONFIG_MONGODB_ADMINPASSWORD=123 \
  -e ME_CONFIG_BASICAUTH_USERNAME=admin \
  -e ME_CONFIG_BASICAUTH_PASSWORD=123 \
  mongo-express

The mongodb and mongo-express can be defined using docker-compose :
i.e. through docker-compose.yml:

version: '3'

services:
  mongodb:
    image: mongo
    container_name: mongodb
    networks:
      - mongo-network
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    networks:
      - mongo-network
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=123
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=123
    depends_on:
      - mongodb

networks:
  mongo-network:
    driver: bridge

This Docker Compose file defines two services, mongodb and mongo-express,
just like your original Docker commands. It also specifies the necessary
environment variables, ports, and network configurations.Note the dependency
of mongodb specified using depends_on in mongo-express service.

To use it, create a docker-compose.yml file in your project directory and run 
docker-compose up -d to start the services.

Note: Make sure you parse yaml file to validate it @
https://www.yamllint.com/ before using it in docker-compose.
# Validation can also be done with: `docker-compose config` command
docker-compose config

# To start all the services in docker compose:
docker-compose up -d
# here -d is for background running of the service

# To stop all the services in docker compose:
docker-compose down


# Responsive Personal Website project
#git clone https://github.com/DanielMichalski/responsive-personal-website.git
docker-compose.yml:

version: '3.8'

services:
  apache-with-php:
    build: ./docker-images/apache-with-php
    volumes:
      - ./www:/var/www/html/
    ports:
      - "80:80"
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "1025:1025"
      - "8025:8025"