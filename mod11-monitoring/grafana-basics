Grafana Basics

Devops Shack - 30 Days Of DevOps | Zero To Hero | Monitoring With Grafana | Day-21

https://www.youtube.com/watch?v=zoGWMg7sB5E&t=223s

Grafana from scratch

What is Grafana?
Why do we need it?
How it works?
Grafana demo with a POC.

Demo setup
1. Jenkins on a server
2. A basic static Website 

We need specific information ->
From Jenkins:
1. How many plugins installed in Jenkins,?
2. How many pipelines were created?
3. When was the last pipeline run and who triggered it?
4. How many times the pipeline was run?

From website:
How many times a specific button was clicked?
How many URLs were added?

Problem:
We cannot always go to these websites or Jenkins and access this information.
We cannot ask users of the websites for these details.

Hence we will need a monitoring tool to access and present this information in a human
friendly format like charts, graphs.

Grafana is an analysis and monitoring tool. It cannot directly access the information from the
application. So we will need some other tool to get this information and make it available to
grafana. These tools are called data sources tool or Data Source.

So what is a Data Source?
Data Source is a tool to get the data from the application.

Mulitple data sources are used by organisations
Prometheus
Loki
InfluxDB

Prometheus - Time series data source - fetch data at after a spefied interval of time,
             say fetch every 5 seconds.
Loki - Log aggregation data source - 
InfluxDB - better version of Prometheus - 

Monitoring              Data Source               Application or Website
Visualisation
tool
Grafana <-------------- Prometheus  <------------  Jenkins 
Grafana <-------------- Loki        <------------  Website
Grafana <-------------- InfluxDB    <------------   

Grafana uses the data and presents it to user through graphs, charts, etc.

             5 MB
Grafana ---------------- Prometheus ------------ jenkins
        no. of pipelines
        no of plugins ------------------------- 
        last deployment 
To know how many plugins are there in Jenkins, we need to use Queries.
Using Queries, Grafana will fetch the data from Data Source.



Demo and Handson using Grafana

1. Create an EC2 instance with 8GB RAM - t2.large
   Open these ports in inbound rules of the Security group:
   3000
   8081
   3100
   9090

2. Clone https://github.com/grafana/tutorial-environment

   git clone https://github.com/grafana/tutorial-environment.git

3. You will need docker and docker compose.
   So install docker and docker compose.

4. Install Grafana - it runs on port 3000
   cd ~/tutorial-environment
   docker-compose up -d
   
   To check which all monitoring applications are started
   docker-compose ps

5. Access Grafana from the browser UI
        http://public-ip:3000
        admin/admin

6. Access sample application @ port 8081
   http://public-ip:8081
      Title: Example
        URL: http://example.com 
      -> Submit
      Small Triangle on the top left corner of the web site
      admin/admin

7. Adding the Data source
   Data Sources -> Add data source - Prometheus
   IP address of data source : http://prometheus:9090
   Save & Test - to check the connection to the premetheus data source is working.

8. Query
   In Grafana, go to Explore and add a Query
   Metrics Browser: tns_request_duration_seconds_count
   -> Run Query

   This will show the graph. But it will run the query only once.
   To run the query after every 5 or 10 or 15 seconds, we need to
   select the Interval in Run Query button. Then the graph will be
   updated evry few seconds as per the interval.

9. Functions in Grafana - apply specific functionality on the query

   Rate Function - rate(tns_request_duration_seconds_count[5m])
   This displays the rate of change -i.e. how fast the value increases
   -> Metrics Browser: rate(tns_request_duration_seconds_count[5m])
   -> Run Query

   Sum function - sum(rate(tns_request_duration_seconds_count[5m])) by (route)
   -> Metrics Browser: sum(rate(tns_request_duration_seconds_count[5m])) by (route) group time series by route
   -> Run Query
   click on the Small Triangle on the top left corner of the web site, the rate increases in graph

10. Add a logging data source
    Grafana need to access Loki @ http://loki:3100, for log data
   
    Home-> Configuration -> Data Source - Add Data Source
    Click on Loki
    In the HTTP URL, paste http://loki:3100
    Explore -> Select Loki and in the Log Browser field, 
    -> Log Browser: {filename="/var/log/tns-app.log"}
    -> Run Query
    To check error logs generated by the Website, we can post a new link
    without a URL to generate an error in the browser that says 'empty url'

    And then we can specify the query in the Log Browser: {filename="/var/log/tns-app.log"} |= "error"
    This will filter the logs based on the substring "error" 
    click on log lines generated below to see more detailed information about the error

11. Dashboard - Building a Dashboard in grafana

   To create our first grafana dashboard
   Grafana home -> Create -> Dashboard -> Add a new Panel 
   New Dashboard/Edit Panel
   Metrics Browser: sum(rate(tns_request_duration_seconds_count[5m])) by (route) group time series by route
   Legend: Add {{route}} in Legend - > Panel Title: Traffic
  -> Apply

  Select Period as Last 5 minutes
  And then add more votes for the links in the sample website
  by clicking on the Small Triangle on the top left corner of the web site for the particular URL

  You can see the graph updating.
  We can save this Dashbaord.

12. Grafana managed alert
Create an Alert rule based on the condition upon its satisfaction, the alert is triggered

Contact Point
Alert Rule

Creating or configuring Contact Point
For the demo, we will use request bin - google search Request bin - Click on the first link
(Inspect webhooks and HTTP requests)
We will create public bin for demo.
Grafana Home -> Alerting -> Contact Points
New Contact Point -> Name: RequestBin
Contact point type: webhook

Creating or configuring Alert Rule
Grafana Home -> Alerting -> Alert Rule
-> New Alert rule - > Name: fundamentaltest
Rule Type: Grafana managed alert


